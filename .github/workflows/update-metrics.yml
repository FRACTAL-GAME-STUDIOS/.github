# .github/workflows/update-metrics.yml
name: FiveM ‚Äì Resource Metrics

on:
  schedule:
    - cron: '0 1 * * *'   # Diario a la 1 AM UTC
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate emoji metrics table
        run: |
          RES_FILE="assets/resources.txt"
          if [ ! -f "$RES_FILE" ]; then
            echo "‚ùå $RES_FILE not found" >&2
            exit 1
          fi

          TODAY=$(date -u +"%Y-%m-%d")
          declare -A SERVERS CHANGE

          while IFS= read -r res; do
            [[ -z "$res" ]] && continue
            data=$(curl -s -X POST https://api.5metrics.dev/getResource \
                     -H "Content-Type: application/json" \
                     -H "Origin: https://5metrics.dev" \
                     -d "{\"resource\":\"$res\"}")
            if jq -e '.success' <<<"$data" >/dev/null; then
              srv=$(jq '.resource.servers'  <<<"$data")
              chg=$(jq '.resource.serverRankChange' <<<"$data")
            else
              srv=0; chg=0
            fi
            SERVERS["$res"]=$srv
            CHANGE["$res"]=$chg
          done < "$RES_FILE"

          # C√°lculo global
          total=0; top_res=""; top_srv=0
          for r in "${!SERVERS[@]}"; do
            s=${SERVERS[$r]}
            total=$((total + s))
            if (( s > top_srv )); then
              top_srv=$s; top_res=$r
            fi
          done

          # Genera metrics.md SIN markers
          {
            echo "**üèÜ Top Resource:** **${top_res}** (${top_srv} srv)"
            echo "**üåê Total Servers:** **${total}**"
            echo "**üïí Last Updated:** **${TODAY}**"
            echo
            echo '| **Resource**               | **Servers** | **Change** |'
            echo '|----------------------------|-------------|------------|'
            for r in "${!SERVERS[@]}"; do
              s=${SERVERS[$r]}; chg=${CHANGE[$r]}
              if (( chg > 0 )); then
                sign="+${chg}"; emoji="üíπ"
              elif (( chg < 0 )); then
                sign="${chg}"; emoji="üìâ"
              else
                sign="0";    emoji="‚ûñ"
              fi
              printf "| **%s** | %4s      | %6s %s |\n" "$r" "$s" "$sign" "$emoji"
            done
          } > metrics.md

      - name: Inject metrics into README
        run: |
          RF=$(find . -maxdepth 1 -type f \( -iname "README.md" -o -iname "readme.md" \) | head -n1)
          [ -n "$RF" ] || { echo "‚ùå README not found"; exit 1; }

          # Borra TODO lo que haya entre los markers (sin borrar las l√≠neas)
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' "$RF"
          # Inserta metrics.md justo tras <!-- METRICS START -->
          sed -i '/<!-- METRICS START -->/r metrics.md' "$RF"

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          RF=$(find . -maxdepth 1 -type f \( -iname "README.md" -o -iname "readme.md" \) | head -n1)
          git add "$RF"
          if ! git diff --staged --quiet; then
            git commit -m "‚ú® Update resource metrics table"
            git push
          else
            echo "‚úÖ No hay cambios que commitear"
          fi
