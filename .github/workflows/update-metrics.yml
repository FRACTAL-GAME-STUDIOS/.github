# .github/workflows/update-metrics.yml
name: FiveM – Resource Metrics

on:
  schedule:
    - cron: '0 1 * * *'   # Diario a la 1 AM UTC
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate emoji metrics table grouped by category
        run: |
          RES_FILE="assets/resources.json"
          [ -f "$RES_FILE" ] || { echo "❌ $RES_FILE not found" >&2; exit 1; }

          TODAY=$(date -u +"%Y-%m-%d")
          declare -A SERVERS CHANGE DISPLAY

          # 1) Leer JSON y consultar API
          while IFS='|' read -r display pkg; do
            DISPLAY["$pkg"]="$display"
            data=$(curl -s -X POST https://api.5metrics.dev/getResource \
                     -H "Content-Type: application/json" \
                     -H "Origin: https://5metrics.dev" \
                     -d "{\"resource\":\"$pkg\"}")
            if jq -e '.success' <<<"$data" >/dev/null; then
              srv=$(jq '.resource.servers' <<<"$data")
              chg=$(jq '.resource.serverRankChange' <<<"$data")
            else
              srv=0; chg=0
            fi
            SERVERS["$pkg"]=$srv
            CHANGE["$pkg"]=$chg
          done < <(jq -r '.[] | "\(.displayName)|\(.packages[])"' "$RES_FILE")

          # 2) Cálculo global
          total=0; top_res=""; top_srv=0
          for pkg in "${!SERVERS[@]}"; do
            s=${SERVERS[$pkg]}
            total=$(( total + s ))
            (( s > top_srv )) && { top_srv=$s; top_res=$pkg; }
          done

          # 3) Generar metrics.md SIN marcadores
          {
            echo "**🏆 Top Resource:** **${top_res}** (${top_srv} srv)"
            echo "**🌐 Total Servers:** **${total}**"
            echo "**🕒 Last Updated:** **${TODAY}**"
            echo
            echo '| **Category**               | **Resource**        | **Servers** | **Change** |'
            echo '|----------------------------|---------------------|-------------|------------|'

            count=$(jq 'length' "$RES_FILE")
            for i in $(seq 0 $((count - 1))); do
              catName=$(jq -r ".[$i].displayName" "$RES_FILE")
              first=true
              for pkg in $(jq -r ".[$i].packages[]" "$RES_FILE"); do
                s=${SERVERS[$pkg]}; chg=${CHANGE[$pkg]}
                if (( chg > 0 )); then
                  sign="+${chg}"; emoji="📈"
                elif (( chg < 0 )); then
                  sign="${chg}"; emoji="📉"
                else
                  sign="0";    emoji="➖"
                fi

                if $first; then
                  catCell="**${catName}**"
                  first=false
                else
                  catCell=""
                fi

                printf "| %-26s | %-19s | %11s | %5s %s |\n" \
                  "$catCell" "$pkg" "$s" "$sign" "$emoji"
              done
            done
          } > metrics.md

      - name: Inject metrics into README files
        run: |
          for RF in README.md profile/readme.md; do
            if [ -f "$RF" ]; then
              # Borra solo el contenido entre los marcadores
              sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' "$RF"
              # Inserta únicamente metrics.md (la tabla) después de METRICS START
              sed -i '/<!-- METRICS START -->/r metrics.md' "$RF"
            fi
          done

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          for RF in README.md profile/readme.md; do
            [ -f "$RF" ] && git add "$RF"
          done
          if ! git diff --staged --quiet; then
            git commit -m "✨ Update resource metrics table"
            git push
          else
            echo "✅ No changes to commit"
          fi
