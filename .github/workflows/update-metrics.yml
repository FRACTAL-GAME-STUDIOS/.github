name: FiveM - Resource Metrics

on:
  schedule:
    - cron: '0 1 * * *'   # Diario a la 1AM UTC
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate HTML metrics snippet
        run: |
          RES_FILE="assets/resources.txt"
          if [ ! -f "$RES_FILE" ]; then
            echo "‚ùå $RES_FILE not found" >&2
            exit 1
          fi

          NOW=$(date -u +"%Y-%m-%d %H:%M UTC")

          # Leer recursos y guardar servidores y cambios
          declare -A SERVERS CHANGE
          while IFS= read -r res; do
            [[ -z "$res" ]] && continue
            data=$(curl -s -X POST https://api.5metrics.dev/getResource \
                      -H "Content-Type: application/json" \
                      -H "Origin: https://5metrics.dev" \
                      -d "{\"resource\":\"$res\"}")
            ok=$(jq -r '.success' <<< "$data")
            if [[ "$ok" == "true" ]]; then
              srv=$(jq '.resource.servers' <<< "$data")
              chg=$(jq '.resource.serverRankChange' <<< "$data")
            else
              srv=0; chg=0
            fi
            SERVERS["$res"]=$srv
            CHANGE["$res"]=$chg
          done < "$RES_FILE"

          # Calcular totales y top resource
          total=0; top_res=""; top_srv=0
          for r in "${!SERVERS[@]}"; do
            s=${SERVERS[$r]}
            total=$((total + s))
            if (( s > top_srv )); then
              top_srv=$s
              top_res=$r
            fi
          done

          # Construir el HTML completo en metrics.html
          {
            echo '<!-- METRICS START -->'
            echo '<div class="metrics-summary">'
            echo "  üîç <strong>Top Resource:</strong> ${top_res} (${top_srv} servers)<br>"
            echo "  üåê <strong>Total Servers:</strong> ${total}<br>"
            echo "  üïí <strong>Last Updated:</strong> ${NOW}"
            echo '</div>'
            echo
            echo '<div class="metrics-widgets">'
          } > metrics.html

          for r in "${!SERVERS[@]}"; do
            s=${SERVERS[$r]}; chg=${CHANGE[$r]}
            if (( chg > 0 )); then
              sign="+$chg"; arrow="üîº"
            elif (( chg < 0 )); then
              sign="$chg"; arrow="üîΩ"
            else
              sign="+0"; arrow="‚è∫Ô∏è"
            fi

            {
              echo '  <div class="metrics-widget">'
              echo "    <strong>${r}</strong><br>"
              echo "    üîß Servers: ${s}<br>"
              echo "    üìà Change: ${sign} ${arrow}<br>"
              echo '  </div>'
            } >> metrics.html
          done

          echo '</div>' >> metrics.html
          echo '<!-- METRICS END -->' >> metrics.html

      - name: Inject metrics into README
        run: |
          # Localiza README.md o readme.md
          RF=$(find . -maxdepth 1 -type f \( -iname README.md -o -iname readme.md \) | head -n1)
          if [ -z "$RF" ]; then
            echo "‚ùå README not found" >&2
            exit 1
          fi

          # Reemplaza entre los marcadores
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' "$RF"
          sed -i '/<!-- METRICS START -->/r metrics.html' "$RF"

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          RF=$(find . -maxdepth 1 -type f \( -iname README.md -o -iname readme.md \) | head -n1)
          git add "$RF"
          if ! git diff --staged --quiet; then
            git commit -m "‚ú® Update resource metrics widget"
            git push
          else
            echo "‚úÖ No hay cambios"
          fi
