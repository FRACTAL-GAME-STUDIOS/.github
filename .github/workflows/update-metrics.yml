# .github/workflows/update-metrics.yml
name: FiveM – Resource Metrics

on:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate emoji metrics table grouped & sorted
        run: |
          RES_FILE="assets/resources.json"
          if [ ! -f "$RES_FILE" ]; then
            echo "❌ $RES_FILE not found" >&2
            exit 1
          fi

          TODAY=$(date -u +"%Y-%m-%d")
          declare -A SERVERS CHANGE

          # fetch metrics
          pkgs=($(jq -r '.[].packages[]' "$RES_FILE"))
          for pkg in "${pkgs[@]}"; do
            data=$(curl -s -X POST https://api.5metrics.dev/getResource \
                     -H "Content-Type: application/json" \
                     -H "Origin: https://5metrics.dev" \
                     -d "{\"resource\":\"$pkg\"}")
            if jq -e '.success' <<<"$data" > /dev/null; then
              srv=$(jq '.resource.servers' <<<"$data")
              chg=$(jq '.resource.serverRankChange' <<<"$data")
            else
              srv=0; chg=0
            fi
            SERVERS[$pkg]=$srv
            CHANGE[$pkg]=$chg
          done

          # global stats
          total=0; top_pkg=""; top_srv=0
          for pkg in "${pkgs[@]}"; do
            s=${SERVERS[$pkg]}
            total=$((total + s))
            if (( s > top_srv )); then top_srv=$s; top_pkg=$pkg; fi
          done

          # build metrics.md
          {
            echo "**🏆 Top Resource:** **${top_pkg}** (${top_srv} srv)"
            echo "**🌐 Total Servers:** **${total}**"
            echo "**🕒 Last Updated:** **${TODAY}**"
            echo
            echo '| **Category**               | **Resource**        | **Servers** | **Change** |'
            echo '|----------------------------|---------------------|-------------|------------|'
          } > metrics.md

          # per-category sorted
          cat_count=$(jq 'length' "$RES_FILE")
          for i in $(seq 0 $((cat_count-1))); do
            disp=$(jq -r ".[$i].displayName" "$RES_FILE")
            # prepare temp list
            tmp=$(mktemp)
            for pkg in $(jq -r ".[$i].packages[]" "$RES_FILE"); do
              s=${SERVERS[$pkg]}; chg=${CHANGE[$pkg]}
              if (( chg > 0 )); then
                sign="+${chg}"; emoji="📈"
              elif (( chg < 0 )); then
                sign="${chg}"; emoji="📉"
              else
                sign="0";    emoji="➖"
              fi
              # sortkey|pkg|srv|sign emoji
              printf "%s|%s|%s|%s %s\n" "$s" "$pkg" "$s" "$sign" "$emoji" >> "$tmp"
            done
            # output sorted rows
            first=true
            sort -t'|' -k1,1nr "$tmp" | while IFS='|' read _ pkg srv change; do
              if $first; then
                catcell="**${disp}**"
                first=false
              else
                catcell=""
              fi
              printf "| %-26s | %-19s | %11s | %-9s |\n" \
                "$catcell" "$pkg" "$srv" "$change" >> metrics.md
            done
            rm "$tmp"
          done

      - name: Inject metrics into root README.md
        run: |
          if [ -f "./README.md" ]; then
            sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' README.md
            sed -i '/<!-- METRICS START -->/r metrics.md' README.md
          fi
          if [ -f "./profile/readme.md" ]; then
            sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' profile/readme.md
            sed -i '/<!-- METRICS START -->/r metrics.md' profile/readme.md
          fi

      - name: Commit & push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md profile/readme.md || true
          if ! git diff --staged --quiet; then
            git commit -m "✨ Update sorted resource metrics table"
            git push
          else
            echo "✅ No changes to commit"
          fi
