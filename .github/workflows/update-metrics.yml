# .github/workflows/update-metrics.yml
name: FiveM - Resource Metrics

on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Generate HTML metrics snippet
        run: |
          RES_FILE="assets/resources.txt"
          [ -f "$RES_FILE" ] || { echo "‚ùå $RES_FILE not found"; exit 1; }
          NOW=$(date -u +"%Y-%m-%d %H:%M UTC")

          # Arrays temporales
          declare -A SERVERS CHANGE

          # Recorrer recursos
          while IFS= read -r res; do
            [[ -z "$res" ]] && continue
            data=$(curl -s -X POST https://api.5metrics.dev/getResource \
                    -H "Content-Type: application/json" \
                    -H "Origin: https://5metrics.dev" \
                    -d "{\"resource\":\"$res\"}")
            ok=$(jq -r '.success' <<<"$data")
            if [[ "$ok" == "true" ]]; then
              srv=$(jq '.resource.servers' <<<"$data")
              chg=$(jq '.resource.serverRankChange' <<<"$data")
            else
              srv=0; chg=0
            fi
            SERVERS["$res"]=$srv
            CHANGE["$res"]=$chg
          done < "$RES_FILE"

          # C√°lculos globales
          total=0
          top_res=""
          top_srv=0
          for r in "${!SERVERS[@]}"; do
            s=${SERVERS[$r]}; total=$((total + s))
            if (( s > top_srv )); then top_srv=$s; top_res=$r; fi
          done

          # Construir HTML
          cat > metrics.html <<EOF
<!-- METRICS START -->
<div class="metrics-summary">
  üîç <strong>Top Resource:</strong> ${top_res} (${top_srv} servers)<br>
  üåê <strong>Total Servers:</strong> ${total}<br>
  üïí <strong>Last Updated:</strong> ${NOW}
</div>

<div class="metrics-widgets">
EOF

          for r in "${!SERVERS[@]}"; do
            s=${SERVERS[$r]}; chg=${CHANGE[$r]}
            # arrow +/-
            if (( chg > 0 )); then arr="up"; sign="+$chg";
            elif (( chg < 0 )); then arr="down"; sign="$chg";
            else arr="none"; sign="+0"; fi

            cat >> metrics.html <<HTML
  <div class="metrics-widget">
    <strong>${r}</strong><br>
    üîß Servers: ${s}<br>
    üìà Change: ${sign} (${arr})<br>
  </div>
HTML
          done

          cat >> metrics.html <<EOF
</div>
<!-- METRICS END -->
EOF

      - name: Inject metrics into README
        run: |
          # Detectar README (may√∫sculas/min√∫sculas)
          RF=$(find . -maxdepth 1 -type f \( -iname "README.md" -o -iname "readme.md" \) | head -n1)
          [ -n "$RF" ] || { echo "‚ùå README no encontrado"; exit 1; }

          # Reemplazar secci√≥n entre marcadores
          sed -i '/<!-- METRICS START -->/,/<!-- METRICS END -->/{//!d}' "$RF"
          sed -i '/<!-- METRICS START -->/r metrics.html' "$RF"

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          RF=$(find . -maxdepth 1 -type f \( -iname "README.md" -o -iname "readme.md" \) | head -n1)
          git add "$RF"
          if ! git diff --staged --quiet; then
            git commit -m "‚ú® Update resource metrics widget"
            git push
          else
            echo "‚úÖ No hay cambios"
          fi
